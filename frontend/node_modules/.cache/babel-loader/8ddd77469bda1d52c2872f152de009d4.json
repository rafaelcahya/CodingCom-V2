{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  async function getSpace() {\n    switchToSpace(http);\n\n    try {\n      const response = await http.get('');\n      return wrapSpace(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!id) {\n      throw notFoundError(id);\n    }\n\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * console.log(response.items)\n   */\n\n\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  async function sync() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}","map":{"version":3,"sources":["C:/.Cahya/Cahya/Project/baru/coding.com remake/frontend/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"names":["Object","defineProperty","exports","value","default","createContentfulApi","_contentfulSdkCore","require","_entities","_interopRequireDefault","_pagedSync","_normalizeSelect","_validateTimestamp","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","ASSET_KEY_MAX_LIFETIME","_ref","http","getGlobalOptions","wrapSpace","space","wrapContentType","wrapContentTypeCollection","contentType","wrapEntry","wrapEntryCollection","entry","wrapAsset","wrapAssetCollection","asset","wrapTag","wrapTagCollection","tag","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","getSpace","switchToSpace","response","get","data","errorHandler","getContentType","switchToEnvironment","getContentTypes","query","undefined","createRequestConfig","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  async function getSpace() {\n    switchToSpace(http);\n\n    try {\n      const response = await http.get('');\n      return wrapSpace(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!id) {\n      throw notFoundError(id);\n    }\n\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * console.log(response.items)\n   */\n\n\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  async function sync() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}"]},"metadata":{},"sourceType":"script"}