{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = void 0;\nexports.default = validateTimestamp;\n\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(`Invalid \"${name}\" provided, ` + message);\n    this.name = 'ValidationError';\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was \"${typeof timestamp}\"`);\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);\n  }\n}","map":{"version":3,"sources":["C:/.Cahya/Cahya/Project/baru/coding.com remake/frontend/node_modules/contentful/dist/es-modules/utils/validate-timestamp.js"],"names":["Object","defineProperty","exports","value","ValidationError","default","validateTimestamp","Error","constructor","name","message","timestamp","options","maximum","now"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;AACAF,OAAO,CAACG,OAAR,GAAkBC,iBAAlB;;AAEA,MAAMF,eAAN,SAA8BG,KAA9B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,UAAO,YAAWD,IAAK,cAAjB,GAAiCC,OAAvC;AACA,SAAKD,IAAL,GAAY,iBAAZ;AACD;;AAJiC;;AAQpCP,OAAO,CAACE,eAAR,GAA0BA,eAA1B;;AAEA,SAASE,iBAAT,CAA2BG,IAA3B,EAAiCE,SAAjC,EAA4CC,OAA5C,EAAqD;AACnDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAM,IAAIP,eAAJ,CAAoBK,IAApB,EAA2B,sEAAqE,OAAOE,SAAU,GAAjH,CAAN;AACD;;AAED,MAAIC,OAAO,CAACC,OAAR,IAAmBF,SAAS,GAAGC,OAAO,CAACC,OAA3C,EAAoD;AAClD,UAAM,IAAIT,eAAJ,CAAoBK,IAApB,EAA2B,UAASE,SAAU,4DAA2DC,OAAO,CAACC,OAAQ,GAAzH,CAAN;AACD;;AAED,MAAID,OAAO,CAACE,GAAR,IAAeH,SAAS,GAAGC,OAAO,CAACE,GAAvC,EAA4C;AAC1C,UAAM,IAAIV,eAAJ,CAAoBK,IAApB,EAA2B,UAASE,SAAU,6CAA4CC,OAAO,CAACE,GAAI,EAAtG,CAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = void 0;\nexports.default = validateTimestamp;\n\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(`Invalid \"${name}\" provided, ` + message);\n    this.name = 'ValidationError';\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was \"${typeof timestamp}\"`);\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);\n  }\n}"]},"metadata":{},"sourceType":"script"}